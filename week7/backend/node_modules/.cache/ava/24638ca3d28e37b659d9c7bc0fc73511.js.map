{"version":3,"sources":["test/restaurant.js"],"names":["restaurantToCreate","name","location","comments","t","plan","restaurantCreate","app","post","send","is","status","body","index","restaurantCreated","deleteRes","delete","_id","ok","fetch","get","fetchJson","fetchRes","restaurantFetched","deepEqual","err","console","error","message","res","jsonRes","true","Array","isArray","length","update","restaurantToUpdate","put","restaurantResultJSON"],"mappings":"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","sourceRoot":"/Users/kyunghwa/Desktop/WTM2019/Homeworks/week7","sourcesContent":["import test from 'ava'\nimport request from 'supertest'\nimport app from '../app'\n\nconst restaurantToCreate = {\n    name: \"Test1\",\n    location: \"Test\",\n    comments: []\n}\n\ntest(\"Create new restaurant\", async t => {\n\n    t.plan(4)\n\n\n    const restaurantCreate = await request(app)\n        .post(\"/restaurants/new\")\n        .send(restaurantToCreate)\n\n    t.is(restaurantCreate.status, 200)\n    t.is(restaurantCreate.body.name, restaurantToCreate.name)\n    t.is(restaurantCreate.body.location, restaurantToCreate.location)\n    t.is(restaurantCreate.body.index, restaurantToCreate.index)\n\n})\n\n\n\ntest(\"Delete a restaurant\", async t => {\n    t.plan(4)\n\n\n\n    const restaurantCreated = (await request(app)\n        .post(\"/restaurants/new\")\n        .send(restaurantToCreate)).body\n\n    const deleteRes = await request(app).delete(`/restaurants/${restaurantCreated._id}`)\n    t.is(deleteRes.status, 200)\n    t.is(deleteRes.ok, true)\n\n    const fetch = await request(app).get(`/restaurants/${restaurantCreated._id}`)\n    t.is(fetch.status, 404)\n\n    const fetchJson = await request(app).get(`/restaurants/${restaurantCreated._id}/json`)\n    t.is(fetchJson.status, 404)\n\n})\n\ntest(\"Fetch a restaurant\", async t => {\n    t.plan(2);\n\n    try {\n        const restaurantCreated = (await request(app)\n            .post(\"/restaurants/new\")\n            .send(restaurantToCreate)).body\n\n        const fetchRes = await request(app).get(\n            `/restaurants/${restaurantCreated._id}`\n        )\n        t.is(fetchRes.status, 200);\n\n        const restaurantFetched = fetchRes.body\n        t.deepEqual(restaurantFetched, restaurantCreated);\n    } catch (err) {\n        console.error(err.message)\n        res.status(500).send(`Server error: ${err.message}`)\n    }\n})\n\ntest(\"Get list of restaurants\", async t => {\n\n    t.plan(3)\n\n    const restaurantCreated = await request(app)\n        .post('/restaurants/new')\n        .send(restaurantToCreate)\n\n    const jsonRes = await request(app).get('/restaurants')\n\n    t.is(jsonRes.status, 200)\n\n    // check the response whether it is an array\n    t.true(Array.isArray(jsonRes.body), 'Body should be an array')\n        // check the response whether at least there is 1 element\n    t.true(jsonRes.body.length > 0)\n\n\n})\n\ntest('update restaurant info', async t => {\n\n    t.plan(2)\n    const restaurantCreated = (await request(app)\n        .post('/restaurants/new')\n        .send(restaurantToCreate)).body\n\n    const update = { name: 'Updated' }\n\n    const restaurantToUpdate = await request(app)\n        .put(`/restaurants/update/${restaurantCreated._id}`)\n        .send(update)\n\n    t.is(restaurantToUpdate.status, 200)\n\n    const restaurantResultJSON = await request(app).get(`/restaurants/${restaurantCreated._id}/`)\n    t.deepEqual(restaurantResultJSON.body.name, update.name)\n})"]}