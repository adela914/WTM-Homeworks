"use strict";

var _ava = _interopRequireDefault(require("ava"));

var _supertest = _interopRequireDefault(require("supertest"));

var _app = _interopRequireDefault(require("../app"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const restaurantToCreate = {
  name: "Test1",
  location: "Test",
  comments: []
};
(0, _ava.default)("Create new restaurant", async t => {
  t.plan(4);
  const restaurantCreate = await (0, _supertest.default)(_app.default).post("/restaurants/new").send(restaurantToCreate);
  t.is(restaurantCreate.status, 200);
  t.is(restaurantCreate.body.name, restaurantToCreate.name);
  t.is(restaurantCreate.body.location, restaurantToCreate.location);
  t.is(restaurantCreate.body.index, restaurantToCreate.index);
});
(0, _ava.default)("Delete a restaurant", async t => {
  t.plan(4);
  const restaurantCreated = (await (0, _supertest.default)(_app.default).post("/restaurants/new").send(restaurantToCreate)).body;
  const deleteRes = await (0, _supertest.default)(_app.default).delete(`/restaurants/${restaurantCreated._id}`);
  t.is(deleteRes.status, 200);
  t.is(deleteRes.ok, true);
  const fetch = await (0, _supertest.default)(_app.default).get(`/restaurants/${restaurantCreated._id}`);
  t.is(fetch.status, 404);
  const fetchJson = await (0, _supertest.default)(_app.default).get(`/restaurants/${restaurantCreated._id}/json`);
  t.is(fetchJson.status, 404);
});
(0, _ava.default)("Fetch a restaurant", async t => {
  t.plan(2);

  try {
    const restaurantCreated = (await (0, _supertest.default)(_app.default).post("/restaurants/new").send(restaurantToCreate)).body;
    const fetchRes = await (0, _supertest.default)(_app.default).get(`/restaurants/${restaurantCreated._id}`);
    t.is(fetchRes.status, 200);
    const restaurantFetched = fetchRes.body;
    t.deepEqual(restaurantFetched, restaurantCreated);
  } catch (err) {
    console.error(err.message);
    res.status(500).send(`Server error: ${err.message}`);
  }
});
(0, _ava.default)("Get list of restaurants", async t => {
  t.plan(3);
  const restaurantCreated = await (0, _supertest.default)(_app.default).post('/restaurants/new').send(restaurantToCreate);
  const jsonRes = await (0, _supertest.default)(_app.default).get('/restaurants');
  t.is(jsonRes.status, 200); // check the response whether it is an array

  t.true(Array.isArray(jsonRes.body), 'Body should be an array'); // check the response whether at least there is 1 element

  t.true(jsonRes.body.length > 0);
});
(0, _ava.default)('update restaurant info', async t => {
  t.plan(2);
  const restaurantCreated = (await (0, _supertest.default)(_app.default).post('/restaurants/new').send(restaurantToCreate)).body;
  const update = {
    name: 'Updated'
  };
  const restaurantToUpdate = await (0, _supertest.default)(_app.default).put(`/restaurants/update/${restaurantCreated._id}`).send(update);
  t.is(restaurantToUpdate.status, 200);
  const restaurantResultJSON = await (0, _supertest.default)(_app.default).get(`/restaurants/${restaurantCreated._id}/`);
  t.deepEqual(restaurantResultJSON.body.name, update.name);
});
//# sourceMappingURL=/Users/kyunghwa/Desktop/WTM2019/Homeworks/week7/node_modules/.cache/ava/24638ca3d28e37b659d9c7bc0fc73511.js.map